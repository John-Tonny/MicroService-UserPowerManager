// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: srv/role/v1/proto/proto.proto

// import public "google/protobuf/timestamp.proto";

package SrvRole

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for SrvRole service

type SrvRoleService interface {
	// 根据用户组获取权限
	GetPermissionsForUser(ctx context.Context, in *ForUserRequest, opts ...client.CallOption) (*GetPermissionsForUserResponse, error)
	// 获取用户组列表
	DeletePermissionsForUser(ctx context.Context, in *ForUserRequest, opts ...client.CallOption) (*DeletePermissionsForUserResponse, error)
	// 获取单个用户组
	RemoveFilteredPolicy(ctx context.Context, in *RemoveFilteredPolicyRequest, opts ...client.CallOption) (*Empty, error)
	// 修改用户组信息
	AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...client.CallOption) (*Empty, error)
	// 批量删除用户组
	GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...client.CallOption) (*GetRolesForUserResponse, error)
}

type srvRoleService struct {
	c    client.Client
	name string
}

func NewSrvRoleService(name string, c client.Client) SrvRoleService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "SrvRole"
	}
	return &srvRoleService{
		c:    c,
		name: name,
	}
}

func (c *srvRoleService) GetPermissionsForUser(ctx context.Context, in *ForUserRequest, opts ...client.CallOption) (*GetPermissionsForUserResponse, error) {
	req := c.c.NewRequest(c.name, "SrvRole.GetPermissionsForUser", in)
	out := new(GetPermissionsForUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvRoleService) DeletePermissionsForUser(ctx context.Context, in *ForUserRequest, opts ...client.CallOption) (*DeletePermissionsForUserResponse, error) {
	req := c.c.NewRequest(c.name, "SrvRole.DeletePermissionsForUser", in)
	out := new(DeletePermissionsForUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvRoleService) RemoveFilteredPolicy(ctx context.Context, in *RemoveFilteredPolicyRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "SrvRole.RemoveFilteredPolicy", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvRoleService) AddPolicy(ctx context.Context, in *AddPolicyRequest, opts ...client.CallOption) (*Empty, error) {
	req := c.c.NewRequest(c.name, "SrvRole.AddPolicy", in)
	out := new(Empty)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *srvRoleService) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, opts ...client.CallOption) (*GetRolesForUserResponse, error) {
	req := c.c.NewRequest(c.name, "SrvRole.GetRolesForUser", in)
	out := new(GetRolesForUserResponse)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SrvRole service

type SrvRoleHandler interface {
	// 根据用户组获取权限
	GetPermissionsForUser(context.Context, *ForUserRequest, *GetPermissionsForUserResponse) error
	// 获取用户组列表
	DeletePermissionsForUser(context.Context, *ForUserRequest, *DeletePermissionsForUserResponse) error
	// 获取单个用户组
	RemoveFilteredPolicy(context.Context, *RemoveFilteredPolicyRequest, *Empty) error
	// 修改用户组信息
	AddPolicy(context.Context, *AddPolicyRequest, *Empty) error
	// 批量删除用户组
	GetRolesForUser(context.Context, *GetRolesForUserRequest, *GetRolesForUserResponse) error
}

func RegisterSrvRoleHandler(s server.Server, hdlr SrvRoleHandler, opts ...server.HandlerOption) error {
	type srvRole interface {
		GetPermissionsForUser(ctx context.Context, in *ForUserRequest, out *GetPermissionsForUserResponse) error
		DeletePermissionsForUser(ctx context.Context, in *ForUserRequest, out *DeletePermissionsForUserResponse) error
		RemoveFilteredPolicy(ctx context.Context, in *RemoveFilteredPolicyRequest, out *Empty) error
		AddPolicy(ctx context.Context, in *AddPolicyRequest, out *Empty) error
		GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, out *GetRolesForUserResponse) error
	}
	type SrvRole struct {
		srvRole
	}
	h := &srvRoleHandler{hdlr}
	return s.Handle(s.NewHandler(&SrvRole{h}, opts...))
}

type srvRoleHandler struct {
	SrvRoleHandler
}

func (h *srvRoleHandler) GetPermissionsForUser(ctx context.Context, in *ForUserRequest, out *GetPermissionsForUserResponse) error {
	return h.SrvRoleHandler.GetPermissionsForUser(ctx, in, out)
}

func (h *srvRoleHandler) DeletePermissionsForUser(ctx context.Context, in *ForUserRequest, out *DeletePermissionsForUserResponse) error {
	return h.SrvRoleHandler.DeletePermissionsForUser(ctx, in, out)
}

func (h *srvRoleHandler) RemoveFilteredPolicy(ctx context.Context, in *RemoveFilteredPolicyRequest, out *Empty) error {
	return h.SrvRoleHandler.RemoveFilteredPolicy(ctx, in, out)
}

func (h *srvRoleHandler) AddPolicy(ctx context.Context, in *AddPolicyRequest, out *Empty) error {
	return h.SrvRoleHandler.AddPolicy(ctx, in, out)
}

func (h *srvRoleHandler) GetRolesForUser(ctx context.Context, in *GetRolesForUserRequest, out *GetRolesForUserResponse) error {
	return h.SrvRoleHandler.GetRolesForUser(ctx, in, out)
}
